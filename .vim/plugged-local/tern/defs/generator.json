{
  "!name": "generator",
  "generator": {
    "Base": {
      "extend": {
        "!type": "fn(object: ?) -> generator",
        "!effects": ["copy generator !0"],
        "!url": "http://www.test.com",
        "!doc": "for testing purposes for now"
      },
      "expand": {

      },
      "expandFiles": {

      },
      "isPathAbsolute": {

      },
      "mkdir": {

      }
    },
    "_writeFiles": {
      "!doc": "Write memory fs file to disk and logging results",
      "!type": "fn(done: fn())",
      "!url": ""
    },
    "appname": {
      "!doc": "A string represents appname; It's default to current folder name",
      "!type": "string",
      "!url": ""
    },
    "argument": {
      "!doc": "Adds an argument to the class and creates an attribute getter for it.",
      "!type": "fn(name: string, config: ?)",
      "!url": ""
    },
    "argumentsHelp": {
      "!doc": "Get help text for arguments",
      "!type": "fn() -> string",
      "!url": ""
    },
    "bowerInstall": {
      "!doc": "Receives a list of components and an options object to install through bower. The installation will automatically run during the run loop install phase.",
      "!type": "fn(cmpnt?: string|[string], options?: ?, cb?: fn())",
      "!url": ""
    },
    "bulkCopy": {
      "!doc": "A copy method skipping templating and conflict checking. It will allow copying a large amount of files without causing too many recursion errors.",
      "!type": "fn(source: string, destination: string)",
      "!url": ""
    },
    "bulkDirectory": {
      "!doc": "Copies recursively the files from source directory to root directory.",
      "!type": "fn(source: string, destination: string, process: fn())",
      "!url": ""
    },
    "cacheRoot": {
      "!doc": "Stores and return the cache root for this class. The cache root is used to git clone repositories from github by .remote() for example.",
      "!type": "fn()",
      "!url": ""
    },
    "composeWith": {
      "!doc": "Compose this generator with another one.",
      "!type": "fn(namespace: string, options: ?, settings?: ?) -> !this",
      "!url": ""
    },
    "copy": {
      "!doc": "Make some of the file API aware of our source/destination root paths. copy, template (only when could be applied/required by legacy code), write and alike consider.",
      "!type": "fn(source: string, destination: string)",
      "!url": ""
    },
    "defaultFor": {
      "!doc": "Return the default value for the option name.",
      "!type": "fn(name: string)",
      "!url": ""
    },
    "desc": {
      "!doc": "Simple setter for custom description to append on help output.",
      "!type": "fn(description: string)",
      "!url": ""
    },
    "destinationPath": {
      "!doc": "Join a path to the destination root.",
      "!type": "fn(path: string) -> string",
      "!url": ""
    },
    "destinationRoot": {
      "!doc": "Change the generator destination root directory. This path is used to find storage, when using a file system helper method (like this.write and this.copy)",
      "!type": "fn(rootPath: string) -> string",
      "!url": ""
    },
    "determineAppname": {
      "!doc": "Determines the name of the application. First checks for name in bower.json. Then checks for name in package.json. Finally defaults to the name of the current directory.",
      "!type": "fn() -> string",
      "!url": ""
    },
    "directory": {
      "!doc": "Copies recursively the files from source directory to root directory.",
      "!type": "fn(source: string, destination: string, process: fn())",
      "!url": ""
    },
    "git": {
      "email": {
        "!doc": "Retrieves user's email from Git in the global scope or the project scope (it'll take what Git will use in the current context)",
        "!type": "fn() -> string",
        "!url": ""
      },
      "name": {
        "!doc": "Retrieves user's name from Git in the global scope or the project scope (it'll take what Git will use in the current context)",
        "!type": "fn() -> string",
        "!url": ""
      }
    },
    "gruntfile": {
      "insertConfig": {
        "!doc": "Insert a configuration block inside the grunt.initConfig() call.",
        "!type": "fn(name: string, config: ?)",
        "!url": ""
      },
      "insertVariable": {
        "!doc": "Insert a variable to the top of the Gruntfile.",
        "!type": "fn(name: string, value: string)",
        "!url": ""
      },
      "loadNpmTasks": {
        "!doc": "Load a Grunt plugin.",
        "!type": "fn(pluginName: string)",
        "!url": ""
      },
      "prependJavaScript": {
        "!doc": "Insert a piece of arbritary JavaScript code to the top of the Gruntfile.",
        "!type": "fn(code: string)",
        "!url": ""
      },
      "registerTask": {
        "!doc": "Register a task inside a named task group",
        "!type": "fn(name: string, desc?: string, task: string|[string])",
        "!url": ""
      },
      "toString": {
        "!doc": "Returns the modified Gruntfile as a string.",
        "!type": "fn()",
        "!url": ""
      }
    },
    "extract": {
      "!doc": "Fetch an archive and extract it to a given destination.",
      "!type": "fn(archive: string, destination: string, options: ?, cb: fn())",
      "!url": ""
    },
    "fetch": {
      "!doc": "Download a file to a given destination.",
      "!type": "fn(url: string, destination: string, cb: fn())",
      "!url": ""
    },
    "help": {
      "!doc": "Tries to get the description from a USAGE file one folder above the source root otherwise uses a default description.",
      "!type": "fn()",
      "!url": ""
    },
    "installDependencies": {
      "!doc": "Runs npm and bower, in sequence, in the generated directory and prints a message to let the user know.",
      "!type": "fn(options?: ?)",
      "!url": ""
    },
    "npmInstall": {
      "!doc": "Receives a list of packages and an options object to install through npm. The installation will automatically run during the run loop install phase.",
      "!type": "fn(packages?: string|[string], options?: ?, cb?: fn())",
      "!url": ""
    },
    "option": {
      "!doc": "Adds an option to the set of generator expected options, only used to generate generator usage. By default, generators get all the cli options parsed by nopt as a this.options hash object.",
      "!type": "fn(name: string, config: ?)",
      "!url": ""
    },
    "optionsHelp": {
      "!doc": "Get help text for options",
      "!type": "fn() -> string",
      "!url": ""
    },
    "prompt": {
      "!doc": "Prompt user to answer questions. The signature of this method is the same as Inquirer.js",
      "!type": "fn(questions: [?], callback: fn(answers: ?)) -> !this",
      "!url": ""
    },
    "read": {
      "!doc": "A simple method to read the content of a file. The encoding is utf8 by default, to read binary files, pass the proper encoding or null.",
      "!type": "fn(filePath: string, encoding?: string)",
      "!url": ""
    },
    "registerTransformStream": {
      "!doc": "Add a transform stream to the commit stream. Most usually, these transform stream will be Gulp plugins.",
      "!type": "fn(stream: ?|[?]) -> !this",
      "!url": ""
    },
    "remote": {
      "!doc": "When fetching an archive",
      "!type": "fn(url: string, cb: fn(), refresh: bool)",
      "!url": ""
    },
    "remoteDir": {
      "!doc": "Retrieve a stored directory and use as a remote reference. This is handy if you have files you want to move that may have been downloaded differently to using this.remote() (eg such as node_modules installed via package.json)",
      "!type": "fn(cache: string, cb: fn())",
      "!url": ""
    },
    "rootGeneratorName": {
      "!doc": "Determine the root generator name (the one who's extending Base).",
      "!type": "fn() -> string",
      "!url": ""
    },
    "rootGeneratorVersion": {
      "!doc": "Determine the root generator version (the one who's extending Base).",
      "!type": "fn() -> string",
      "!url": ""
    },
    "run": {
      "!doc": "Runs the generator, scheduling prototype methods on a run queue. Method names will determine the order each method is run. Methods without special names will run in the default queue.",
      "!type": "fn(cb?: fn())",
      "!url": ""
    },
    "runInstall": {
      "!doc": "Combine package manager cmd line arguments and run the install command.",
      "!type": "fn(installer: string, paths?: string|[string], options?: ?, cb?: fn())",
      "!url": ""
    },
    "sourceRoot": {
      "!doc": "Change the generator source root directory. This path is used by multiples file system methods like (this.read and this.copy)",
      "!type": "fn(rootPath: string) -> string",
      "!url": ""
    },
    "spawnCommand": {
      "!doc": "Normalize a command across OS and spawn it (asynchronously).",
      "!type": "fn(command: string, args: [?], opt?: ?)",
      "!url": ""
    },
    "spawnCommandSync": {
      "!doc": "Normalize a command across OS and spawn it (synchronously).",
      "!type": "fn(command: string, args: [?], opt?: ?)",
      "!url": ""
    },
    "template": {
      "!doc": "Gets a template at the relative source, executes it and makes a copy at the relative destination. If the destination is not given it's assumed to be equal to the source relative to destination.",
      "!type": "fn(source: string, destination: string, data: ?, options: ?)",
      "!url": ""
    },
    "templatePath": {
      "!doc": "Join a path to the source root.",
      "!type": "fn(path: string) -> string",
      "!url": ""
    },
    "usage": {
      "!doc": "Output usage information for this given generator, depending on its arguments, options or hooks.",
      "!type": "fn()",
      "!url": ""
    },
    "github": {
      "username": {
        "!doc": "Retrieves GitHub's username from the GitHub API.",
        "!type": "fn() -> string",
        "!url": ""
      }
    },
    "write": {
      "!doc": "Writes a chunk of data to a given filepath, checking for collision prior to the file write.",
      "!type": "fn(filePath: string, content: string)",
      "!url": ""
    }
  }
}
