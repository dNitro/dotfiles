function! jsomni#javascript#getlist(method)
  let list = []
  let method = matchstr(a:method, '\.\zs\k\+')

  if a:method == "css"
    let list = split("animation animation-delay animation-direction animation-duration animation-fill-mode animation-iteration-count animation-name animation-play-state animation-timing-function azimuth align-content align-items align-self backface-visibility background background-attachment background-color background-image background-position background-size background-origin background-clip background-repeat border bottom border-collapse border-color border-spacing border-style border-top border-right border-bottom border-left border-top-color border-right-color border-bottom-color border-left-color  border-top-style border-right-style border-bottom-style border-left-style border-top-width border-right-width border-bottom-width border-left-width border-width border-radius border-top-left-radius border-top-right-radius border-bottom-right-radius border-bottom-left-radius border-image border-image-source border-image-slice border-image-width border-image-outset border-image-repeat box-shadow box-sizing caption-side clear clip color column-count column-gap column-rule column-rule-color column-rule-style column-rule-width column-span column-width columns content counter-increment counter-reset cue cue-after cue-before cursor display direction elevation empty-cells flex flex-basis flex-direction flex-flow flex-grow flex-shrink flex-wrap float font font-family font-size font-style font-variant font-weight justify-content height left letter-spacing line-height list-style list-style-image list-style-position list-style-type margin margin-right margin-left margin-top margin-bottom max-height max-width min-height min-width opacity order orphans outline outline-color outline-offset outline-style outline-width overflow overflow-x overflow-y padding padding-top padding-right padding-bottom padding-left page-break-after page-break-before page-break-inside pause pause-after pause-before perspective perspective-origin pitch pitch-range play-during position quotes right richness resize speak speak-header speak-numeral speak-punctuation speech-rate src stress table-layout text-align text-decoration text-indent text-overflow text-rendering text-shadow text-transform top transform transform-origin transform-style transition transition-property transition-duration transition-timing-function transition-delay unicode-bidi vertical-align visibility voice-family volume white-space width widows word-spacing word-wrap z-index")
    let list = map(list, '"''".v:val."'': "')
  endif

  if a:method == "loadNpmTasks" || method == "loadNpmTasks"
    let list = keys(json_decode(join(readfile('package.json')))['devDependencies'])
  endif

  if a:method == "extend" || method == "extend"
    let list = [
    \ "initializing",
    \ "prompting",
    \ "configuring",
    \ "default",
    \ "writing",
    \ "conflicts",
    \ "install",
    \ "end"
    \ ]
  endif

  if a:method == "initConfig" || a:method == "registerTask" || method == "initConfig" || method == "registerTask"
    let list = map(keys(json_decode(join(readfile('package.json')))['devDependencies']), "matchstr(v:val, '\\%(grunt-contrib-\\|grunt-\\)\\zs.*')")
    let list = map(list, "substitute(v:val, '-', '_', 'g')")
    let list = filter(list, 'v:val != ""')
    let list = map(list, 'v:val.": "')
  endif

  if a:method == "registerTask" || method == "registerTask"
    let list = map(keys(json_decode(join(readfile('package.json')))['devDependencies']), "matchstr(v:val, '\\%(grunt-contrib-\\|grunt-\\)\\zs.*')")
    let list = map(list, "substitute(v:val, '-', '_', 'g')")
    let list = filter(list, 'v:val != ""')
  endif

  if a:method == "ajax"
    let list = [
    \  {'word': 'accepts: ', 'menu': '(obj)'},
    \  {'word': 'async: ', 'menu': '(bool)'},
    \  {'word': 'beforeSend: ', 'menu': '(fn)'},
    \  {'word': 'cache: ', 'menu': '(bool)'},
    \  {'word': 'complete: ', 'menu': '(fn)'},
    \  {'word': 'contents: ', 'menu': '(obj)'},
    \  {'word': 'contentType: ', 'menu': '(bool|str)'},
    \  {'word': 'context: ', 'menu': '(obj)'},
    \  {'word': 'converters: ', 'menu': '(obj)'},
    \  {'word': 'crossDomain: ', 'menu': '(bool)'},
    \  {'word': 'data: ', 'menu': '(obj|str|arr)'},
    \  {'word': 'dataFilter: ', 'menu': '(fn)'},
    \  {'word': 'dataType: ', 'menu': '(str)'},
    \  {'word': 'error: ', 'menu': '(fn)'},
    \  {'word': 'global: ', 'menu': '(bool)'},
    \  {'word': 'headers: ', 'menu': '(obj)'},
    \  {'word': 'ifModified: ', 'menu': '(bool)'},
    \  {'word': 'isLocal: ', 'menu': '(bool)'},
    \  {'word': 'jsonp: ', 'menu': '(str|bool)'},
    \  {'word': 'jsonpCallback: ', 'menu': '(str|fn)'},
    \  {'word': 'method: ', 'menu': '(str)'},
    \  {'word': 'mimeType: ', 'menu': '(str)'},
    \  {'word': 'password: ', 'menu': '(str)'},
    \  {'word': 'processData: ', 'menu': '(bool)'},
    \  {'word': 'scriptCharset: ', 'menu': '(str)'},
    \  {'word': 'statusCode: ', 'menu': '(obj)'},
    \  {'word': 'success: ', 'menu': '(fn)'},
    \  {'word': 'timeout: ', 'menu': '(num)'},
    \  {'word': 'traditional: ', 'menu': '(bool)'},
    \  {'word': 'type: ', 'menu': '(str)'},
    \  {'word': 'url: ', 'menu': '(str)'},
    \  {'word': 'username: ', 'menu': '(str)'},
    \  {'word': 'xhr: ', 'menu': '(fn)'},
    \  {'word': 'xhrFields: ', 'menu': '(obj)'}
    \  ]
  endif

  if a:method == "Accept-Encoding" || a:method == "Content-Encoding" || method == "Accept-Encoding" || method == "Content-Encoding"
    let list = [
     \ "compress",
     \ "deflate",
     \ "exi",
     \ "gzip",
     \ "identity",
     \ "pack200-gzip",
     \ "bzip2",
     \ "lzma",
     \ "peerdist",
     \ "sdch",
     \ "xz"
     \ ]
  endif

  if a:method == "X-UA-Compatible" || method == "X-UA-Compatible"
    let list = [
     \ "IE=5",
     \ "IE=7",
     \ "IE=8",
     \ "IE=9",
     \ "IE=10",
     \ "IE=11",
     \ "IE=edge",
     \ "IE=EmulateIE7",
     \ "IE=EmulateIE8",
     \ "IE=EmulateIE9",
     \ "IE=EmulateIE10",
     \ "IE=EmulateIE11",
     \ "Chrome=1"
     \ ]
  endif

  if a:method == "getResponseHeader" || method == "getResponseHeader"
    let list = [
     \ "Access-Control-Allow-Origin",
     \ "Accept-Ranges",
     \ "Age",
     \ "Allow",
     \ "Cache-Control",
     \ "Connection",
     \ "Content-Encoding",
     \ "Content-Language",
     \ "Content-Location",
     \ "Content-MD5",
     \ "Content-Disposition",
     \ "Content-Range",
     \ "Content-Type",
     \ "ETag",
     \ "Expires",
     \ "Last-Modified",
     \ "Link",
     \ "Location",
     \ "P3P",
     \ "Pragma",
     \ "Refresh",
     \ "Retry-After",
     \ "Server",
     \ "Set-Cookie",
     \ "Status",
     \ "Strict-Transport-Security",
     \ "Trailer",
     \ "Vary",
     \ "Warning",
     \ "WWW-Authenticate",
     \ "X-Frame-Options",
     \ "Public-Key-Pins",
     \ "X-XSS-Protection",
     \ "Content-Security-Policy",
     \ "X-Content-Security-Policy",
     \ "X-WebKit-CSP",
     \ "X-Content-Type-Options",
     \ "X-Powered-By",
     \ "X-UA-Compatible"
     \ ]
  endif

  if a:method == "setRequestHeader" || a:method == "headers.append" || a:method == "headers.set" || method == "setRequestHeader" || method == "headers.append" || method == "headers.set"
    let list = [
     \ "Accept",
     \ "Accept-Language",
     \ "Accept-Datetime",
     \ "Authorization",
     \ "Cache-Control",
     \ "Cookie",
     \ "Content-MD5",
     \ "Content-Type",
     \ "From",
     \ "If-Match",
     \ "If-Modified-Since",
     \ "If-None-Match",
     \ "If-Range",
     \ "If-Unmodified-Since",
     \ "Max-Forwards",
     \ "Pragma",
     \ "Range",
     \ "Warning",
     \ "X-Requested-With",
     \ "X-Forwarded-For",
     \ "X-Forwarded-Host",
     \ "X-Forwarded-Proto",
     \ "Front-End-Https",
     \ "X-Http-Method-Override",
     \ "X-ATT-DeviceId",
     \ "X-Wap-Profile"
     \ ]
  endif

  if a:method == "headers.get" || method == "headers.get"
    let list = [
     \ "Accept",
     \ "Accept-Language",
     \ "Accept-Datetime",
     \ "Authorization",
     \ "Cache-Control",
     \ "Cookie",
     \ "Content-MD5",
     \ "Content-Type",
     \ "From",
     \ "If-Match",
     \ "If-Modified-Since",
     \ "If-None-Match",
     \ "If-Range",
     \ "If-Unmodified-Since",
     \ "Max-Forwards",
     \ "Pragma",
     \ "Range",
     \ "Warning",
     \ "X-Requested-With",
     \ "X-Forwarded-For",
     \ "X-Forwarded-Host",
     \ "X-Forwarded-Proto",
     \ "Front-End-Https",
     \ "X-Http-Method-Override",
     \ "X-ATT-DeviceId",
     \ "X-Wap-Profile",
     \ "Access-Control-Allow-Origin",
     \ "Accept-Ranges",
     \ "Age",
     \ "Allow",
     \ "Cache-Control",
     \ "Connection",
     \ "Content-Encoding",
     \ "Content-Language",
     \ "Content-Location",
     \ "Content-MD5",
     \ "Content-Disposition",
     \ "Content-Range",
     \ "Content-Type",
     \ "ETag",
     \ "Expires",
     \ "Last-Modified",
     \ "Link",
     \ "Location",
     \ "P3P",
     \ "Pragma",
     \ "Refresh",
     \ "Retry-After",
     \ "Server",
     \ "Set-Cookie",
     \ "Status",
     \ "Strict-Transport-Security",
     \ "Trailer",
     \ "Vary",
     \ "Warning",
     \ "WWW-Authenticate",
     \ "X-Frame-Options",
     \ "Public-Key-Pins",
     \ "X-XSS-Protection",
     \ "Content-Security-Policy",
     \ "X-Content-Security-Policy",
     \ "X-WebKit-CSP",
     \ "X-Content-Type-Options",
     \ "X-Powered-By",
     \ "X-UA-Compatible"
     \ ]
  endif

  if a:method == "headers.getAll" || method == "headers.getAll"
    let list = [
     \ "Accept",
     \ "Accept-Language",
     \ "Accept-Datetime",
     \ "Authorization",
     \ "Cache-Control",
     \ "Cookie",
     \ "Content-MD5",
     \ "Content-Type",
     \ "From",
     \ "If-Match",
     \ "If-Modified-Since",
     \ "If-None-Match",
     \ "If-Range",
     \ "If-Unmodified-Since",
     \ "Max-Forwards",
     \ "Pragma",
     \ "Range",
     \ "Warning",
     \ "X-Requested-With",
     \ "X-Forwarded-For",
     \ "X-Forwarded-Host",
     \ "X-Forwarded-Proto",
     \ "Front-End-Https",
     \ "X-Http-Method-Override",
     \ "X-ATT-DeviceId",
     \ "X-Wap-Profile",
     \ "Access-Control-Allow-Origin",
     \ "Accept-Ranges",
     \ "Age",
     \ "Allow",
     \ "Cache-Control",
     \ "Connection",
     \ "Content-Encoding",
     \ "Content-Language",
     \ "Content-Location",
     \ "Content-MD5",
     \ "Content-Disposition",
     \ "Content-Range",
     \ "Content-Type",
     \ "ETag",
     \ "Expires",
     \ "Last-Modified",
     \ "Link",
     \ "Location",
     \ "P3P",
     \ "Pragma",
     \ "Refresh",
     \ "Retry-After",
     \ "Server",
     \ "Set-Cookie",
     \ "Status",
     \ "Strict-Transport-Security",
     \ "Trailer",
     \ "Vary",
     \ "Warning",
     \ "WWW-Authenticate",
     \ "X-Frame-Options",
     \ "Public-Key-Pins",
     \ "X-XSS-Protection",
     \ "Content-Security-Policy",
     \ "X-Content-Security-Policy",
     \ "X-WebKit-CSP",
     \ "X-Content-Type-Options",
     \ "X-Powered-By",
     \ "X-UA-Compatible"
     \ ]
  endif

  if a:method == "headers.has" || method == "headers.has"
    let list = [
     \ "Accept",
     \ "Accept-Language",
     \ "Accept-Datetime",
     \ "Authorization",
     \ "Cache-Control",
     \ "Cookie",
     \ "Content-MD5",
     \ "Content-Type",
     \ "From",
     \ "If-Match",
     \ "If-Modified-Since",
     \ "If-None-Match",
     \ "If-Range",
     \ "If-Unmodified-Since",
     \ "Max-Forwards",
     \ "Pragma",
     \ "Range",
     \ "Warning",
     \ "X-Requested-With",
     \ "X-Forwarded-For",
     \ "X-Forwarded-Host",
     \ "X-Forwarded-Proto",
     \ "Front-End-Https",
     \ "X-Http-Method-Override",
     \ "X-ATT-DeviceId",
     \ "X-Wap-Profile",
     \ "Access-Control-Allow-Origin",
     \ "Accept-Ranges",
     \ "Age",
     \ "Allow",
     \ "Cache-Control",
     \ "Connection",
     \ "Content-Encoding",
     \ "Content-Language",
     \ "Content-Location",
     \ "Content-MD5",
     \ "Content-Disposition",
     \ "Content-Range",
     \ "Content-Type",
     \ "ETag",
     \ "Expires",
     \ "Last-Modified",
     \ "Link",
     \ "Location",
     \ "P3P",
     \ "Pragma",
     \ "Refresh",
     \ "Retry-After",
     \ "Server",
     \ "Set-Cookie",
     \ "Status",
     \ "Strict-Transport-Security",
     \ "Trailer",
     \ "Vary",
     \ "Warning",
     \ "WWW-Authenticate",
     \ "X-Frame-Options",
     \ "Public-Key-Pins",
     \ "X-XSS-Protection",
     \ "Content-Security-Policy",
     \ "X-Content-Security-Policy",
     \ "X-WebKit-CSP",
     \ "X-Content-Type-Options",
     \ "X-Powered-By",
     \ "X-UA-Compatible"
     \ ]
  endif

  if a:method == "contentType" || a:method == "Content-Type" || a:method == "Accept" || method == "contentType" || method == "Content-Type" || method == "Accept"
    let list = [
     \ "application/javascript",
     \ "application/json",
     \ "application/x-www-form-urlencoded",
     \ "aaplication/xml",
     \ "multipart/form-data",
     \ "text/html",
     \ "text/xml"
     \ ]
  endif

  if a:method == "dataType" || method == "dataType"
    let list = [
     \ "xml",
     \ "html",
     \ "json",
     \ "jsonp",
     \ "text"
     \ ]
  endif

  if a:method == "toLocaleString" || a:method == "toLocaleDateString" || a:method == "toLocaleTimeString" || a:method == "Accept-Language" || a:method == "Content-Language" || method == "toLocaleString" || method == "toLocaleDateString" || method == "toLocaleTimeString" || method == "Accept-Language" || method == "Content-Language"
    let list = [
     \ "ar-EG",
     \ "cs-CZ",
     \ "da-DK",
     \ "de-AT",
     \ "de-CH",
     \ "de-DE",
     \ "el-GR",
     \ "en-GB",
     \ "en-US",
     \ "es-ES",
     \ "es-MX",
     \ "fi-FI",
     \ "fr-CA",
     \ "fr-CH",
     \ "fr-FR",
     \ "hu-HU",
     \ "it-IT",
     \ "ja-JP",
     \ "ko-KR",
     \ "my-MM",
     \ "nb-NO",
     \ "nl-NL",
     \ "pl-PL",
     \ "pt-BR",
     \ "pt-PT",
     \ "ro-RO",
     \ "ru-RU",
     \ "sv-SE",
     \ "th-TH",
     \ "tr-TR",
     \ "vi-VN",
     \ "zh-CN",
     \ "zh-TW",
     \ "id-ID"
     \ ]
  endif

  if a:method == "createElement" || a:method == "createElementNS" || method == "createElement" || method == "createElementNS"
    let list = [
     \ "a",
     \ "abbr",
     \ "address",
     \ "area",
     \ "article",
     \ "aside",
     \ "audio",
     \ "b",
     \ "base",
     \ "bdi",
     \ "bdo",
     \ "blockquote",
     \ "body",
     \ "br",
     \ "button",
     \ "canvas",
     \ "caption",
     \ "center",
     \ "cite",
     \ "code",
     \ "col",
     \ "colgroup",
     \ "content",
     \ "data",
     \ "datalist",
     \ "dd",
     \ "decorator",
     \ "del",
     \ "details",
     \ "dfn",
     \ "dialog",
     \ "div",
     \ "dl",
     \ "dt",
     \ "element",
     \ "em",
     \ "embed",
     \ "fieldset",
     \ "figcaption",
     \ "figure",
     \ "font",
     \ "footer",
     \ "form",
     \ "h1",
     \ "h2",
     \ "h3",
     \ "h4",
     \ "h5",
     \ "h6",
     \ "head",
     \ "header",
     \ "hr",
     \ "html",
     \ "i",
     \ "iframe",
     \ "img",
     \ "input",
     \ "ins",
     \ "kbd",
     \ "keygen",
     \ "label",
     \ "legend",
     \ "li",
     \ "link",
     \ "main",
     \ "map",
     \ "mark",
     \ "menu",
     \ "menuitem",
     \ "meta",
     \ "meter",
     \ "nav",
     \ "noscript",
     \ "object",
     \ "ol",
     \ "optgroup",
     \ "option",
     \ "output",
     \ "p",
     \ "param",
     \ "picture",
     \ "pre",
     \ "progress",
     \ "q",
     \ "rp",
     \ "rt",
     \ "ruby",
     \ "s",
     \ "samp",
     \ "script",
     \ "section",
     \ "select",
     \ "shadow",
     \ "small",
     \ "source",
     \ "span",
     \ "strong",
     \ "style",
     \ "sub",
     \ "summary",
     \ "sup",
     \ "table",
     \ "tbody",
     \ "td",
     \ "template",
     \ "textarea",
     \ "tfoot",
     \ "th",
     \ "thead",
     \ "time",
     \ "title",
     \ "tr",
     \ "track",
     \ "u",
     \ "ul",
     \ "var",
     \ "video",
     \ "wbr"
     \ ]
  endif

  if a:method == "open" || a:method == "method" || a:method == "type" || method == "open" || method == "method" || method == "type"
    let list = [
     \ "GET",
     \ "POST",
     \ "PUT",
     \ "DELETE",
     \ "PATCH",
     \ "HEAD",
     \ "OPTIONS",
     \ "TRACE",
     \ "CONNECT"
     \ ]
  endif

  if a:method == "toDataURL" || a:method == "toBlob" || method == "toDataURL" || method == "toBlob"
    let list = [
     \ "image/jpg",
     \ "image/jpeg",
     \ "image/png"
     \ ]
  endif

  if a:method == "encrypt" || a:method == "decrypt" || method == "encrypt" || method == "decrypt"
    let list = [
     \ "RSAES-PKCS1-v1_5",
     \ "RSASSA-PKCS1-v1_5",
     \ "RSA-PSS",
     \ "RSA-OAEP",
     \ "ECDSA",
     \ "ECDH",
     \ "AES-CTR",
     \ "AES-CBC",
     \ "AES-CMAC",
     \ "AES-GCM",
     \ "AES-CFB",
     \ "AES-KW",
     \ "HMAC",
     \ "DH",
     \ "SHA-1",
     \ "SHA-256",
     \ "SHA-384",
     \ "SHA-512",
     \ "CONCAT",
     \ "HKDF-CTR",
     \ "PBKDF2"
     \ ]
  endif

  if a:method == "addEventListener" || a:method == "removeEventListener" || a:method == "on" || a:method == "one" || a:method == "once" || a:method == "off" || a:method == "bind" || a:method == "trigger" || a:method == "delegate" || a:method == "undelegate" || a:method == "listenTo" || a:method == "stopListening" || a:method == "listenToOnce" || method == "addEventListener" || method == "removeEventListener" || method == "on" || method == "one" || method == "once" || method == "off" || method == "bind" || method == "trigger" || method == "delegate" || method == "undelegate" || method == "listenTo" || method == "stopListening" || method == "listenToOnce"
    let list = [
     \ "animationend",
     \ "animationiteration",
     \ "animationstart",
     \ "beginEvent",
     \ "endEvent",
     \ "repeatEvent",
     \ "CssRuleViewRefreshed",
     \ "CssRuleViewChanged",
     \ "CssRuleViewCSSLinkClicked",
     \ "transitionend",
     \ "blocked",
     \ "complete",
     \ "error",
     \ "success",
     \ "upgradeneeded",
     \ "versionchange",
     \ "DOMLinkAdded",
     \ "DOMLinkRemoved",
     \ "DOMMetaAdded",
     \ "DOMMetaRemoved",
     \ "DOMWillOpenModalDialog",
     \ "DOMModalDialogClosed",
     \ "unload",
     \ "DOMAttributeNameChanged",
     \ "DOMAttrModified",
     \ "DOMCharacterDataModified",
     \ "DOMContentLoaded",
     \ "DOMElementNameChanged",
     \ "DOMNodeInserted",
     \ "DOMNodeInsertedIntoDocument",
     \ "DOMNodeRemoved",
     \ "DOMNodeRemovedFromDocument",
     \ "DOMSubtreeModified",
     \ "drag",
     \ "dragdrop",
     \ "dragend",
     \ "dragenter",
     \ "dragexit",
     \ "draggesture",
     \ "dragleave",
     \ "dragover",
     \ "dragstart",
     \ "drop",
     \ "invalid",
     \ "overflow",
     \ "underflow",
     \ "DOMAutoComplete",
     \ "command",
     \ "commandupdate",
     \ "blur",
     \ "change",
     \ "DOMFocusIn",
     \ "DOMFocusOut",
     \ "focus",
     \ "focusin",
     \ "focusout",
     \ "reset",
     \ "submit",
     \ "DOMFrameContentLoaded",
     \ "click",
     \ "contextmenu",
     \ "DOMMouseScroll",
     \ "dblclick",
     \ "gamepadconnected",
     \ "gamepaddisconnected",
     \ "keydown",
     \ "keypress",
     \ "keyup",
     \ "mousedown",
     \ "mouseenter",
     \ "mouseleave",
     \ "mousemove",
     \ "mouseout",
     \ "mouseover",
     \ "mouseup",
     \ "mousewheel",
     \ "pointerlockchange",
     \ "pointerlockerror",
     \ "wheel",
     \ "audioprocess",
     \ "canplay",
     \ "canplaythrough",
     \ "durationchange",
     \ "emptied",
     \ "ended",
     \ "ended",
     \ "loadeddata",
     \ "loadedmetadata",
     \ "pause",
     \ "play",
     \ "playing",
     \ "ratechange",
     \ "seeked",
     \ "seeking",
     \ "stalled",
     \ "suspend",
     \ "timeupdate",
     \ "volumechange",
     \ "waiting",
     \ "complete",
     \ "DOMMenuItemActive",
     \ "DOMMenuItemInactive",
     \ "datachange",
     \ "dataerror",
     \ "disabled",
     \ "enabled",
     \ "offline",
     \ "online",
     \ "statuschange",
     \ "connectionInfoUpdate",
     \ "abort",
     \ "error",
     \ "load",
     \ "loadend",
     \ "loadstart",
     \ "progress",
     \ "timeout",
     \ "uploadprogress",
     \ "cached",
     \ "error",
     \ "load",
     \ "afterscriptexecute",
     \ "beforescriptexecute",
     \ "compassneedscalibration",
     \ "devicelight",
     \ "devicemotion",
     \ "deviceorientation",
     \ "deviceproximity",
     \ "orientationchange",
     \ "userproximity",
     \ "pagehide",
     \ "pageshow",
     \ "popstate",
     \ "storage",
     \ "SVGAbort",
     \ "SVGError",
     \ "SVGLoad",
     \ "SVGResize",
     \ "SVGScroll",
     \ "SVGUnload",
     \ "SVGZoom",
     \ "visibilitychange",
     \ "compositionend",
     \ "compositionstart",
     \ "compositionupdate",
     \ "copy",
     \ "cut",
     \ "paste",
     \ "select",
     \ "text",
     \ "touchcancel",
     \ "touchend",
     \ "touchenter",
     \ "touchleave",
     \ "touchmove",
     \ "touchstart",
     \ "checking",
     \ "downloading",
     \ "error",
     \ "noupdate",
     \ "obsolete",
     \ "updateready",
     \ "hashchange",
     \ "input",
     \ "readystatechange",
     \ "fullscreen",
     \ "fullscreenchange",
     \ "fullscreenerror",
     \ "resize",
     \ "scroll",
     \ "close",
     \ "error",
     \ "message",
     \ "open",
     \ "DOMWindowCreated",
     \ "DOMWindowClose",
     \ "DOMTitleChanged",
     \ "beforeunload",
     \ "message",
     \ "show"
     \ ]
  endif

  return list
endfunction
