# snippet "^(\s*['\"])" "desc" rbA
# `!p snip.rv = match.group(1)`$0`!v cosco#Davidof()`
# endsnippet
# ==== DOM ==================================================
#snippet "(get|set|create|has|query|insert)(Document|Element|Attribute|Text|Selector|Adjacent|Interval|Timeout)((s?By\w+|[A-Z][a-z]+)?)(([A-Z]+$)?)" "desc" ri
#`!p snip.rv = match.group(1)``!p snip.rv = match.group(2)``!p snip.rv = match.group(3)``!p snip.rv = match.group(5)`($0)
#endsnippet
#snippet require "desc" "re.match('^\s*require', snip.buffer[snip.line])" be
#require([${1}], function(${1/".*?(?:(jquery)|\/?([A-Za-z0-9_-]+)\.+).*?"/(?1:$:$2)/g}) {
#  $0
#})
#endsnippet
#snippet define "desc" "re.match('^\s*define', snip.buffer[snip.line])" be
#define(${1:"${2:name/id}", }${3:[${4}], }function(${4/".*?(?:(jquery)|\/?([A-Za-z0-9_-]+)\.+).*?"/(?1:$:$2)/g}${5}) {
#  $0
#})
#endsnippet
pre_expand "b = re.match('^(\s*)', snip.buffer[snip.line]); a = b.group(1); snip.buffer[snip.line] = a; snip.cursor.set(snip.line, len(a))"
snippet "^\s*use " "desc" rA
"use strict";
endsnippet
pre_expand "b = re.match('^(\s*)', snip.buffer[snip.line]); a = b.group(1); snip.buffer[snip.line] = a; snip.cursor.set(snip.line, len(a))"
snippet "^\s*'use " "desc" rA
'use strict';
endsnippet
pre_expand "b = re.match('^(\s*)', snip.buffer[snip.line]); a = b.group(1); snip.buffer[snip.line] = a; snip.cursor.set(snip.line, len(a))"
snippet !^\s*"use ! "desc" rA
"use strict";
endsnippet
pre_expand "b = re.match('^(\s*)', snip.buffer[snip.line]); a = b.group(1); snip.buffer[snip.line] = a; snip.cursor.set(snip.line, len(a))"
snippet function "desc" "re.match('^\s*function', snip.buffer[snip.line])" be
function ${1}(${2}) {
  $0
}
endsnippet
#snippet function "desc" "re.match('^\s*\w+\.(\w+)+\s*=\s*', snip.buffer[snip.line])" e
#function(${1}) {
#  $0
#}
#endsnippet
#snippet function "desc" "re.match('^\s*\w+\s*=\s*', snip.buffer[snip.line])" e
#function(${1}) {
#  $0
#}
#endsnippet
#snippet function "desc" "re.match('^\s*\w+\s*:\s*', snip.buffer[snip.line])" e
#function(${1}) {
#  $0
#}
#endsnippet
pre_expand "b = re.match('^(\s*)', snip.buffer[snip.line]); a = b.group(1); snip.buffer[snip.line] = a; snip.cursor.set(snip.line, len(a))"
snippet (function "desc" "re.match('^\(', snip.buffer[snip.line])" e
(function(${1}) {
  $0
}(${2}));
endsnippet
snippet (function "desc" "re.match('^\s*var\s*\w+\s*=\s*\(function', snip.buffer[snip.line])" e
(function(${1}) {
  $0
}(${2})
endsnippet
snippet function "desc" i
function(${1}) {
  $0
}
endsnippet
snippet setInterval ""
setInterval($0, $1)
endsnippet
snippet setTimeout ""
setTimeout($0, $1)
endsnippet
# class ##################################################
pre_expand "b = re.match('^(\s*)', snip.buffer[snip.line]); a = b.group(1); snip.buffer[snip.line] = a; snip.cursor.set(snip.line, len(a))"
snippet "\s*class " "desc" rA
class ${1} {
  $0
}
endsnippet
# snippet extends "desc"
# extends ${0}
# endsnippet
pre_expand "b = re.match('^(\s*)', snip.buffer[snip.line]); a = b.group(1); snip.buffer[snip.line] = a; snip.cursor.set(snip.line, len(a))"
snippet "\s*constructor " "desc" rA
constructor ($1) {
  ${VISUAL}$0
}
endsnippet
pre_expand "b = re.match('^(\s*)', snip.buffer[snip.line]); a = b.group(1); snip.buffer[snip.line] = a; snip.cursor.set(snip.line, len(a))"
snippet "^\s*if " "desc" rA
if ( ${1} ) {
  ${VISUAL}$0
}
endsnippet
pre_expand "b = re.match('^(\s*)', snip.buffer[snip.line]); a = b.group(1); snip.buffer[snip.line] = a; snip.cursor.set(snip.line, len(a))"
snippet "^\s*(}?\s*)else if\s" "desc" rA
`!p snip.rv = match.group(1)`else if ( ${1} ) {
  ${VISUAL}$0
}
endsnippet
# pre_expand "b = re.match('^(\s*)', snip.buffer[snip.line]); a = b.group(1); snip.buffer[snip.line] = a; snip.cursor.set(snip.line, len(a))"
# snippet "^\s*(}?\s*)else\s{" "desc" rA
# `!p snip.rv = match.group(1)`else {
#   $0
# }
# endsnippet
pre_expand "b = re.match('^(\s*)', snip.buffer[snip.line]); a = b.group(1); snip.buffer[snip.line] = a; snip.cursor.set(snip.line, len(a))"
snippet "^\s*try\s" "desc" rA
try {
  ${VISUAL}$0
}
endsnippet
pre_expand "b = re.match('^(\s*)', snip.buffer[snip.line]); a = b.group(1); snip.buffer[snip.line] = a; snip.cursor.set(snip.line, len(a))"
snippet "^\s*(}?\s*)catch\s" "desc" rA
`!p snip.rv = match.group(1)`catch ($1) {
  $0
}
endsnippet
pre_expand "b = re.match('^(\s*)', snip.buffer[snip.line]); a = b.group(1); snip.buffer[snip.line] = a; snip.cursor.set(snip.line, len(a))"
snippet "^\s*(}?\s*)finally\s" "desc" rA
`!p snip.rv = match.group(1)`finally {
  $0
}
endsnippet
pre_expand "b = re.match('^(\s*)', snip.buffer[snip.line]); a = b.group(1); snip.buffer[snip.line] = a; snip.cursor.set(snip.line, len(a))"
snippet "^\s*switch " "desc" rA
switch ( ${1} ) {
  case ${2}:
    ${0};
}
endsnippet
pre_expand "b = re.match('^(\s*)', snip.buffer[snip.line]); a = b.group(1); snip.buffer[snip.line] = a; snip.cursor.set(snip.line, len(a))"
snippet "^\s*case " "desc" rA
case ${1}:
  $0;
endsnippet
pre_expand "b = re.match('^(\s*)', snip.buffer[snip.line]); a = b.group(1); snip.buffer[snip.line] = a; snip.cursor.set(snip.line, len(a))"
snippet default "desc" A
default:
  $0;
endsnippet
pre_expand "b = re.match('^(\s*)', snip.buffer[snip.line]); a = b.group(1); snip.buffer[snip.line] = a; snip.cursor.set(snip.line, len(a))"
snippet "^\s*for " "desc" rA
for (${1}; ${2}; ${3}) {
  ${VISUAL}$0
}
endsnippet
pre_expand "b = re.match('^(\s*)', snip.buffer[snip.line]); a = b.group(1); snip.buffer[snip.line] = a; snip.cursor.set(snip.line, len(a))"
snippet "^\s*forin " "for prop in obj using hasOwnProperty" rA
for (var ${1:prop} in ${2:obj}) {
  if (Object.prototype.hasOwnProperty.call($2, $1)) {
    ${VISUAL}$0
  }
}
endsnippet
pre_expand "b = re.match('^(\s*)', snip.buffer[snip.line]); a = b.group(1); snip.buffer[snip.line] = a; snip.cursor.set(snip.line, len(a))"
snippet "^\s*forof " "desc" rA
for (let $1 of $2) {
  ${VISUAL}$0
}
endsnippet
pre_expand "b = re.match('^(\s*)', snip.buffer[snip.line]); a = b.group(1); snip.buffer[snip.line] = a; snip.cursor.set(snip.line, len(a))"
snippet "^\s*static " "desc" rA
static $1($2) {
  ${VISUAL}$0
}
endsnippet
pre_expand "b = re.match('^(\s*)', snip.buffer[snip.line]); a = b.group(1); snip.buffer[snip.line] = a; snip.cursor.set(snip.line, len(a))"
snippet "^\s*while " "desc" rA
while (${1:condition}) {
  ${VISUAL}$0
}
endsnippet
snippet "^\s*do " "desc" rA
do {
  ${VISUAL}$0
}
while (${1:condition})
endsnippet
pre_expand "b = re.match('^(\s*)', snip.buffer[snip.line]); a = b.group(1); snip.buffer[snip.line] = a; snip.cursor.set(snip.line, len(a))"
snippet array "make array from visual selection"
var ${1:array} = [
          ${VISUAL/^(\s*)(.*?)$/$1'$2',/mg}$0
          ];
endsnippet
snippet json "make json notation from v selection"
${VISUAL/^(\s*)(.*?):\s(.*?),?$/$1'$2': '$3',/mg}`!v feedkeys("\<BS>")`
endsnippet
snippet sif "desc"
${VISUAL/^(.*)$/($0)()/}
endsnippet
snippet siv "desc"
(${VISUAL})(${1})
endsnippet
snippet cl "desc"
console.log(${VISUAL}$0)
endsnippet
###############################################################################
# QUnit #######################################################################
snippet QUnit.test "desc" b
QUnit.test('${1}', function(assert) {
  $0
})
endsnippet
snippet require "desc" b
var ${1} = require('${0:${1/\w+/\L$0\E/}}')
endsnippet
snippet "'\+ " "desc" irA
 ' + $0 + '
endsnippet
